"""
Django settings for resetlytics project.

Generated by 'django-admin startproject' using Django 5.0.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

#import sys
#import dj_database_url
from os import getenv, path
from pathlib import Path
from django.core.management.utils import get_random_secret_key
import dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.

BASE_DIR = Path(__file__).resolve().parent.parent

dotenv_file = BASE_DIR / '.env'
if path.isfile(dotenv_file):
    dotenv.load_dotenv(dotenv_file)

DEVELOPMENT_MODE = getenv('DEVELOPMENT_MODE', 'False') == 'True'

if DEVELOPMENT_MODE is True:
    dotenv_file = BASE_DIR / '.env.dev'
else:
    dotenv_file = BASE_DIR / '.env.prod'
if path.isfile(dotenv_file):
    dotenv.load_dotenv(dotenv_file)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/
# manage.py check --deploy

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = getenv('DJANGO_SECRET_ENV', get_random_secret_key())

# SECURITY WARNING: don't run with debug turned on in production
DEBUG = getenv('DEBUG', 'FALSE') == 'True'

ALLOWED_HOSTS = getenv('DJANGO_ALLOWED_HOSTS').split(",")
WEBSITE_URL = getenv('WEBSITE_URL')

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "whitenoise.runserver_nostatic",
    "django.contrib.staticfiles",
    "django.contrib.sites",
    # own
    "app.apps.AppConfig",
    "user.apps.UserConfig",
    # third-party
    "corsheaders",
    "djoser",
    'rest_framework',
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",   
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "debug_toolbar.middleware.DebugToolbarMiddleware",
]

ROOT_URLCONF = 'resetlytics.urls'

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = 'resetlytics.wsgi.application'

# Database

DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': getenv('MYSQL_DATABASE'),
            'USER': getenv('MYSQL_USER'),
            'PASSWORD': getenv('MYSQL_PASSWORD'),
            'HOST': getenv('DB_HOST'),
            'PORT': getenv('DB_PORT'),
        }
}
  
# DATABASES = {"default": env.db()}
# DATABASES = {"default": env.dj_db_url("DATABASE_URL")} dj_database_url
# DATABASE_URL = 'django.db.backends.mysql'

# Email settings

EMAIL_BACKEND = 'django_ses.SESBackend' 
# 'django.core.mail.backends.smtp.EmailBackend'
# DEFAULT_FROM_EMAIL = getenv('AWS_SES_FROM_EMAIL')
# EMAIL_BACKED = "django.core.mail.backends.console.EmailBackend"
# others ...

#DOMAIN = getenv('DOMAIN')
#SITE_NAME = 'Resetlytics'

# Password validation

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization

LANGUAGE_CODE = "en-GB"
TIME_ZONE = "UTC"
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
STATIC_URL = "static/"
STATICFILES_DIRS = [
    BASE_DIR / "static",
]

# locally but see at the end
STATIC_ROOT = BASE_DIR / 'staticfiles'

# change to whitenoise
STORAGES = {
    # ...
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}


#MEDIA_URL = 'media/'
#MEDIA_ROOT = BASE_DIR / 'media'

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'user.authentication.CustomJWTAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        #'rest_framework.permissions.IsAuthenticated',
        'rest_framework.permissions.AllowAny'
        #'rest_framework.permissions.DjangoModelPermissionsOr....
    ]
}

DJOSER = {
    'PASSWORD_RESET_CONFIRM_URL': 'password-reset/{uid}/{token}',
    'SEND_ACTIVATION_EMAIL': True,
    'ACTIVATION_URL': 'activation/{uid}/{token}',
    'USER_CREATE_PASSWORD_RETYPE': True,
    'PASSWORD_RESET_CONFIRM_RETYPE': True,
    'TOKEN_MODEL': None,
   
    #'EMAIL': {
    #    'password_reset': 'djoser.email.PasswordResetEmail',
    #},
}

AUTH_COOKIE = 'access'
AUTH_COOKIE_ACCESS_MAX_AGE = 60 * 60 * 24
AUTH_COOKIE_REFRESH_MAX_AGE = 60 * 60 * 24
AUTH_COOKIE_SECURE = getenv('AUTH_COOKIE_SECURE', 'True') == 'True'
AUTH_COOKIE_HTTP_ONLY = True
AUTH_COOKIE_PATH = '/'
# AUTH_COOKIE_SAMESITE = 'None'
AUTH_COOKIE_SAMESITE = 'Lax'


CSRF_COOKIE_SECURE = getenv('CSRF_COOKIE_SECURE','True') == 'True'
SESSION_COOKIE_SECURE = getenv('SESSION_COOKIE_SECURE','True') == 'True'
SECURE_SSL_REDIRECT = getenv('SECURE_SSL_REDIRECT','True') == 'True'

CORS_ALLOW_CREDENTIALS=getenv('CORS_ALLOW_CREDENTIALS','True') == 'True'
# CORS_ALLOWED_ORIGINS=getenv('CORS_ALLOWED_ORIGINS').split(",")
# CORS_TRUSTED_ORIGINS=getenv('CORS_TRUSTED_ORIGINS').split(",")
# CORS_ORIGINS_WHITELIST=getenv('CORS_ORIGINS_WHITELIST').split(",")
CORS_ALLOW_ALL_ORIGINS=getenv('CORS_ALLOW_ALL_ORIGINS','True') == 'True'

#CSRF_TRUSTED_ORIGINS = []

# Default primary key field type

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL = 'user.ResettingUser'

# Things we want to attach or overwrite

if DEVELOPMENT_MODE is True:
    INSTALLED_APPS = INSTALLED_APPS + ["django_extensions", "debug_toolbar"]
else:
    STATIC_ROOT = getenv("STATIC_ROOT")

